{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","useMutation","saveBook","handleSaveBook","bookToSave","find","Auth","loggedIn","log","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","userData","me","removeBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfba0bf2.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($bookData: BookInput!) {\r\n    saveBook(bookData: $bookData) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        title\r\n        authors\r\n        description\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      savedBooks {\r\n        bookId\r\n        title\r\n        authors\r\n        description\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport {\r\n   Jumbotron,\r\n    Container,\r\n     Col,\r\n      Form,\r\n       Button,\r\n        Card,\r\n         CardColumns \r\n        } from 'react-bootstrap';\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      console.log('bookToSave:', bookToSave);\r\n\r\n      const { data } = await saveBook({\r\n        variables: { bookData: { ...bookToSave } },\r\n      });\r\n      console.log('data:', data);\r\n\r\n      \r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n    'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n };\r\n\r\n// export const createUser = (userData) => {\r\n//   return fetch('/api/users', {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify(userData),\r\n//   });\r\n// };\r\n\r\n// export const loginUser = (userData) => {\r\n//   return fetch('/api/users/login', {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify(userData),\r\n//   });\r\n// };\r\n\r\n// // save book data for a logged in user\r\n// export const saveBook = (bookData, token) => {\r\n//   return fetch('/api/users', {\r\n//     method: 'PUT',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//       authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(bookData),\r\n//   });\r\n// };\r\n\r\n//remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n return fetch(`/api/users/books/${bookId}`, {\r\n   method: 'DELETE',\r\n   headers: {\r\n     authorization: `Bearer ${token}`,\r\n   },\r\n   });\r\n };\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        title\r\n        description\r\n        link\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\n// import { getMe, deleteBook } from '../utils/API';\nimport { useQuery, useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || [];\n  const [removeBook] = useMutation(REMOVE_BOOK);\n \n\n\n  if (!userData) {\n    return null;\n  }\n\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    console.log(bookId);\n    if (!token) {\n      return false;\n    }\n\n    try {\n      \n      await removeBook({\n        variables: { bookId: bookId },\n      });\n\n      // remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n \n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n\n  // // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  // const handleDeleteBook = async (bookId) => {\n  //   const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //   if (!token) {\n  //     return false;\n  //   }\n\n  //   try {\n  //     const response = await deleteBook(bookId, token);\n\n  //     if (!response.ok) {\n  //       throw new Error('something went wrong!');\n  //     }\n\n  //     const updatedUser = await response.json();\n  //     setUserData(updatedUser);\n  //     // upon success, remove book's id from localStorage\n  //     removeBookId(bookId);\n  //   } catch (err) {\n  //     console.error(err);\n  //   }\n  // };\n\n  // // if data isn't here yet, say so\n  // if (!userDataLength) {\n  //   return <h2>LOADING...</h2>;\n  // }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  //added code here\n  const [addUser, { error }] = useMutation(ADD_USER);\n  \n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n  //   // check if form has everything (as per react-bootstrap docs)\n  //   const form = event.currentTarget;\n  //   if (form.checkValidity() === false) {\n  //     event.preventDefault();\n  //     event.stopPropagation();\n  //   }\n\n  //   try {\n  //     const response = await addUser({\n  //       variables: { ...userFormData }\n  //     });\n  //     if (!response.ok) {\n  //       throw new Error('something went wrong!');\n  //     }\n\n  //     const { token, user } = await response.json();\n  //     console.log(user);\n  //     Auth.login(token);\n  //   } catch (err) {\n  //     console.error(err);\n  //     setShowAlert(true);\n  //   }\n\n  //   setUserFormData({\n  //     username: '',\n  //     email: '',\n  //     password: '',\n  //   });\n  // };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  \n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      {error && <div>Login failed</div>}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={SearchBooks} />\r\n          <Route exact path='/saved' component={SavedBooks} />\r\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}